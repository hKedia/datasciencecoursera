for(i in seq_along(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id,nobs))
}
print(dat)
}
complete("specdata", 1)
files_list <- list.files("specdata", full.names=TRUE)
dat <- data.frame()
colnames(dat) <- c("id", "nobs")
attributes(dat)
?colnames
dim(data.frame)
data.frame
dim(dat)
dat <- data.frame(ncol=2)
dat
dat <- data.frame(id=numeric(), nobs=character())
dat
colnames(dat) <- c("id", "nobs")
dat
file <- read.csv(files_list[id[1]])
file <- read.csv(files_list[1])
nobs <- sum(complete.cases(file))
nobs
dat <- rbind(dat, c(1,nobs))
dat
colnames(dat) <- c("id", "nobs")
dat
id <- 1
id[1]
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(ncol=2)
for(i in seq_along(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id,nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in seq_along(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id,nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", c(2, 4, 8, 10, 12))
dat <- data.frame(id=numeric(), nobs=character())
dat <- rbind(dat, c(1,117))
dat
dat <- rbind(dat, c(2,134))
dat
dat <- rbind(dat, c(3,123))
dat
id <- c(2,4,8,10,12)
id
length(id)
id[1]
id[2]
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in length(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id,nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in length(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id,nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", c(2, 4, 8, 10, 12))
files_list <- list.files("specdata", full.names=TRUE)
file <- read.csv(files_list[2])
nobs <- sum(complete.cases(file))
nobs
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in length(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id[i],nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in length(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id[i],nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame(id=numeric(), nobs=character())
for(i in seq_along(id)){
file <- read.csv(files_list[id[i]])
nobs <- sum(complete.cases(file))
dat <- rbind(dat, c(id[i],nobs))
}
colnames(dat) <- c("id", "nobs")
print(dat)
}
complete("specdata", 30:25)
complete("specdata", 3)
complete("specdata", c(2, 4, 8, 10, 12))
source("submitscript1.R")
submit()
submit()
submit()
swirl()
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,
| FALSE, FALSE)
TRUE | c(TRUE,FALSE, FALSE)
TRUE || c(TRUE,FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
getwd()
?cor
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
return cor(dat)
}
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
cor(dat)
}
cr <- corr("specdata", 150)
head(cr)
?which
files_list <- list.files("specdata", full.names=TRUE)
threshold <- 150
dat <- data.frame()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
View(file)
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
nitrate <- dat[,"nitrate"]
nitrate
sulfate <- dat[,"sulphate"]
sulfate <- dat[,"sulfate"]
?cor
cor(nitrate, sulfate)
file <- read.csv(files_list[i])
complete.cases(file)
sum(complete.cases(file))
dat <- c()
dat
?rbind
cor(file)
file
nitrate <- file[,"nitrate"]
head(file)
head(nitrate)
nitrate1 <- file[,"nitrate", na.rm=TRUE]
nitrate1 <- na.omit(file[,"nitrate"])
length(nitrate1)
sum(complete.cases(file))
nitrate1
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
nitrate <- dat[,"nitrate"]
sulfate <- dat[,"sulphate"]
cor(nitrate,sulfate)
}
cr <- corr("specdata", 150)
sulfate <- dat[,"sulfate"]
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
head(dat)
sulfate <- dat[,"sulfate"]
cor(nitrate,sulfate)
cor(dat)
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
nitrate <- dat[,"nitrate"]
sulfate <- dat[,"sulfate"]
cor(nitrate,sulfate)
}
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
nitrate <- dat[,"nitrate"]
sulfate <- dat[,"sulfate"]
cor(nitrate,sulfate)
}
cr <- corr("specdata", 150)
head(cr)
?dat
?cor
?rbind
class(rbind())
temp <- c()
temp <- rbind(temp, c(1,2))
class(temp)
temp
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- rbind(dat,file)
}
cor(dat)
}
cr <- corr("specdata", 150)
?append
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold)
dat <- append(cor(file[,"nitrate"], file[,"sulfate"]))
}
dat
}
cr <- corr("specdata", 150)
files_list <- list.files("specdata", full.names=TRUE)
file <- read.csv(files_list[1])
class(file)
cor(file)
?cor
cor(file[,"nitrate"], file[,"sulfate"])
cor(file[,"nitrate"], file[,"sulfate"], na.rm=TRUE)
na.omit(file[,"nitrate"])
cor(file[,"nitrate"], file[,"sulfate"], use="complete.obs")
corr <- function(directory, threshold = 0) {
files_list <- list.files(directory, full.names=TRUE)
dat <- c()
for(i in 1:332){
file <- read.csv(files_list[i])
nobs <- sum(complete.cases(file))
if (nobs > threshold){
value <- cor(file[,"nitrate"], file[,"sulfate"], use="complete.obs")
dat <- c(dat,value)
}
}
dat
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
summary(cr)
length(cr)
source("submitscript1.R")
submit()
submit()
submit()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,rane)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lappy(unique_vals,length)
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sppaly(flags,class)
sapply(flags,class)
vapply(flags,class, character(1))
?taaply
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red,summary)
tapply(flags$population, flags$landmass,summary)
library(datasets)
data(iris)
?iris
str(iris)
lapply(iris,mean)
?which
temp <- which(iris[,"Species"] = "virginica")
temp <- which(iris[,"Species"]) = "virginica"
temp <- (which(iris[,"Species"]) = "virginica")
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
debug(ls)
ls
debug(ls)
ls()
exit
exit()
ls()
debug
q
q
q
q
q
q
q
q
q
q
q
q
q
q
C
getwd()
ls()
?solve
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x <- makeCacheMatrix(c(2,2),c(3,2))
x <- makeCacheMatrix(c(2,2,3,2))
x
cacheSolve(x)
x <- makeCacheMatrix(c(2,2,3,2), nrow=2,nrow=2)
x <- makeCacheMatrix(matrix(c(2,2,3,2), nrow=2,nrow=2))
cacheSolve(x)
temp <- matrix(c(2,3,2,2), nrow=2,ncol=2, byrow=TRUE)
x <- makeCacheMatrix(temp)
temp
get(x)
get()
x.get()
x$get
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y = matrix()) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
x <- makeCacheMatrix(temp)
x$get
